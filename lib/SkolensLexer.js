// Generated from grammars/Skolens.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,30,198,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,
1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,143,8,24,1,25,1,25,
1,25,5,25,148,8,25,10,25,12,25,151,9,25,1,25,1,25,1,26,1,26,1,26,1,27,3,
27,159,8,27,1,27,4,27,162,8,27,11,27,12,27,163,1,27,1,27,4,27,168,8,27,11,
27,12,27,169,3,27,172,8,27,1,28,1,28,5,28,176,8,28,10,28,12,28,179,9,28,
1,29,4,29,182,8,29,11,29,12,29,183,1,29,1,29,1,30,1,30,1,30,1,30,5,30,192,
8,30,10,30,12,30,195,9,30,1,30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
20,41,21,43,22,45,23,47,24,49,25,51,26,53,0,55,27,57,28,59,29,61,30,1,0,
7,2,0,34,34,92,92,3,0,43,43,45,45,124,124,1,0,48,57,3,0,65,90,95,95,97,122,
4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,2,0,10,10,13,13,206,0,
1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,65,1,0,0,0,5,67,1,0,0,0,7,69,1,0,0,0,9,
71,1,0,0,0,11,73,1,0,0,0,13,75,1,0,0,0,15,77,1,0,0,0,17,79,1,0,0,0,19,81,
1,0,0,0,21,83,1,0,0,0,23,85,1,0,0,0,25,87,1,0,0,0,27,90,1,0,0,0,29,93,1,
0,0,0,31,95,1,0,0,0,33,98,1,0,0,0,35,100,1,0,0,0,37,103,1,0,0,0,39,106,1,
0,0,0,41,110,1,0,0,0,43,112,1,0,0,0,45,119,1,0,0,0,47,122,1,0,0,0,49,142,
1,0,0,0,51,144,1,0,0,0,53,154,1,0,0,0,55,158,1,0,0,0,57,173,1,0,0,0,59,181,
1,0,0,0,61,187,1,0,0,0,63,64,5,61,0,0,64,2,1,0,0,0,65,66,5,59,0,0,66,4,1,
0,0,0,67,68,5,43,0,0,68,6,1,0,0,0,69,70,5,45,0,0,70,8,1,0,0,0,71,72,5,42,
0,0,72,10,1,0,0,0,73,74,5,47,0,0,74,12,1,0,0,0,75,76,5,94,0,0,76,14,1,0,
0,0,77,78,5,37,0,0,78,16,1,0,0,0,79,80,5,40,0,0,80,18,1,0,0,0,81,82,5,41,
0,0,82,20,1,0,0,0,83,84,5,123,0,0,84,22,1,0,0,0,85,86,5,125,0,0,86,24,1,
0,0,0,87,88,5,61,0,0,88,89,5,61,0,0,89,26,1,0,0,0,90,91,5,33,0,0,91,92,5,
61,0,0,92,28,1,0,0,0,93,94,5,60,0,0,94,30,1,0,0,0,95,96,5,60,0,0,96,97,5,
61,0,0,97,32,1,0,0,0,98,99,5,62,0,0,99,34,1,0,0,0,100,101,5,62,0,0,101,102,
5,61,0,0,102,36,1,0,0,0,103,104,5,117,0,0,104,105,5,110,0,0,105,38,1,0,0,
0,106,107,5,118,0,0,107,108,5,97,0,0,108,109,5,105,0,0,109,40,1,0,0,0,110,
111,5,46,0,0,111,42,1,0,0,0,112,113,5,116,0,0,113,114,5,101,0,0,114,115,
5,105,0,0,115,116,5,107,0,0,116,117,5,116,0,0,117,118,5,32,0,0,118,44,1,
0,0,0,119,120,5,106,0,0,120,121,5,97,0,0,121,46,1,0,0,0,122,123,5,99,0,0,
123,124,5,105,0,0,124,125,5,116,0,0,125,126,5,97,0,0,126,127,5,100,0,0,127,
128,5,105,0,0,128,48,1,0,0,0,129,130,5,112,0,0,130,131,5,97,0,0,131,132,
5,116,0,0,132,133,5,105,0,0,133,134,5,101,0,0,134,135,5,115,0,0,135,143,
5,115,0,0,136,137,5,97,0,0,137,138,5,112,0,0,138,139,5,108,0,0,139,140,5,
97,0,0,140,141,5,109,0,0,141,143,5,115,0,0,142,129,1,0,0,0,142,136,1,0,0,
0,143,50,1,0,0,0,144,149,5,34,0,0,145,148,3,53,26,0,146,148,8,0,0,0,147,
145,1,0,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,
0,0,150,152,1,0,0,0,151,149,1,0,0,0,152,153,5,34,0,0,153,52,1,0,0,0,154,
155,5,92,0,0,155,156,7,0,0,0,156,54,1,0,0,0,157,159,7,1,0,0,158,157,1,0,
0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,162,7,2,0,0,161,160,1,0,0,0,162,
163,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,171,1,0,0,0,165,167,3,41,
20,0,166,168,7,2,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,
170,1,0,0,0,170,172,1,0,0,0,171,165,1,0,0,0,171,172,1,0,0,0,172,56,1,0,0,
0,173,177,7,3,0,0,174,176,7,4,0,0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,
1,0,0,0,177,178,1,0,0,0,178,58,1,0,0,0,179,177,1,0,0,0,180,182,7,5,0,0,181,
180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,185,1,0,
0,0,185,186,6,29,0,0,186,60,1,0,0,0,187,188,5,47,0,0,188,189,5,47,0,0,189,
193,1,0,0,0,190,192,8,6,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,
0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,6,30,0,0,197,
62,1,0,0,0,11,0,142,147,149,158,163,169,171,177,183,193,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class SkolensLexer extends antlr4.Lexer {

    static grammarFileName = "Skolens.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'='", "';'", "'+'", "'-'", "'*'", "'/'", 
                         "'^'", "'%'", "'('", "')'", "'{'", "'}'", "'=='", 
                         "'!='", "'<'", "'<='", "'>'", "'>='", "'un'", "'vai'", 
                         "'.'", "'teikt '", "'ja'", "'citadi'" ];
	static symbolicNames = [ null, "ASSIGN", "SEMI", "ADD", "SUB", "MUL", "DIV", 
                          "EXP", "MOD", "LPAREN", "RPAREN", "LCURL", "RCURL", 
                          "EQ", "NOTEQ", "LESS", "LESSEQ", "LARG", "LARGEQ", 
                          "AND", "OR", "DOT", "PRINT", "IF", "ELSE", "BOOL", 
                          "STRING", "NUM", "ID", "WS", "COMMENT" ];
	static ruleNames = [ "ASSIGN", "SEMI", "ADD", "SUB", "MUL", "DIV", "EXP", 
                      "MOD", "LPAREN", "RPAREN", "LCURL", "RCURL", "EQ", 
                      "NOTEQ", "LESS", "LESSEQ", "LARG", "LARGEQ", "AND", 
                      "OR", "DOT", "PRINT", "IF", "ELSE", "BOOL", "STRING", 
                      "ESC", "NUM", "ID", "WS", "COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

SkolensLexer.EOF = antlr4.Token.EOF;
SkolensLexer.ASSIGN = 1;
SkolensLexer.SEMI = 2;
SkolensLexer.ADD = 3;
SkolensLexer.SUB = 4;
SkolensLexer.MUL = 5;
SkolensLexer.DIV = 6;
SkolensLexer.EXP = 7;
SkolensLexer.MOD = 8;
SkolensLexer.LPAREN = 9;
SkolensLexer.RPAREN = 10;
SkolensLexer.LCURL = 11;
SkolensLexer.RCURL = 12;
SkolensLexer.EQ = 13;
SkolensLexer.NOTEQ = 14;
SkolensLexer.LESS = 15;
SkolensLexer.LESSEQ = 16;
SkolensLexer.LARG = 17;
SkolensLexer.LARGEQ = 18;
SkolensLexer.AND = 19;
SkolensLexer.OR = 20;
SkolensLexer.DOT = 21;
SkolensLexer.PRINT = 22;
SkolensLexer.IF = 23;
SkolensLexer.ELSE = 24;
SkolensLexer.BOOL = 25;
SkolensLexer.STRING = 26;
SkolensLexer.NUM = 27;
SkolensLexer.ID = 28;
SkolensLexer.WS = 29;
SkolensLexer.COMMENT = 30;



