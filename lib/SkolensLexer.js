// Generated from grammars/Skolens.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,46,325,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,1,1,1,1,1,2,
1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,
1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,
27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,
37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,
40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,270,8,40,1,41,1,41,1,41,5,41,275,8,
41,10,41,12,41,278,9,41,1,41,1,41,1,42,1,42,1,42,1,43,3,43,286,8,43,1,43,
4,43,289,8,43,11,43,12,43,290,1,43,1,43,4,43,295,8,43,11,43,12,43,296,3,
43,299,8,43,1,44,1,44,5,44,303,8,44,10,44,12,44,306,9,44,1,45,4,45,309,8,
45,11,45,12,45,310,1,45,1,45,1,46,1,46,1,46,1,46,5,46,319,8,46,10,46,12,
46,322,9,46,1,46,1,46,0,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,0,87,43,89,44,91,45,
93,46,1,0,7,2,0,39,39,92,92,3,0,43,43,45,45,124,124,1,0,48,57,4,0,65,90,
95,95,97,122,128,65535,5,0,48,57,65,90,95,95,97,122,128,65535,3,0,9,10,12,
13,32,32,2,0,10,10,13,13,333,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,87,1,0,0,0,
0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,1,95,1,0,0,0,3,97,1,0,0,0,5,99,1,
0,0,0,7,101,1,0,0,0,9,103,1,0,0,0,11,105,1,0,0,0,13,107,1,0,0,0,15,109,1,
0,0,0,17,111,1,0,0,0,19,113,1,0,0,0,21,115,1,0,0,0,23,117,1,0,0,0,25,119,
1,0,0,0,27,121,1,0,0,0,29,123,1,0,0,0,31,126,1,0,0,0,33,129,1,0,0,0,35,131,
1,0,0,0,37,134,1,0,0,0,39,136,1,0,0,0,41,139,1,0,0,0,43,142,1,0,0,0,45,146,
1,0,0,0,47,149,1,0,0,0,49,151,1,0,0,0,51,153,1,0,0,0,53,163,1,0,0,0,55,169,
1,0,0,0,57,178,1,0,0,0,59,185,1,0,0,0,61,191,1,0,0,0,63,194,1,0,0,0,65,201,
1,0,0,0,67,207,1,0,0,0,69,213,1,0,0,0,71,220,1,0,0,0,73,223,1,0,0,0,75,228,
1,0,0,0,77,237,1,0,0,0,79,248,1,0,0,0,81,269,1,0,0,0,83,271,1,0,0,0,85,281,
1,0,0,0,87,285,1,0,0,0,89,300,1,0,0,0,91,308,1,0,0,0,93,314,1,0,0,0,95,96,
5,61,0,0,96,2,1,0,0,0,97,98,5,59,0,0,98,4,1,0,0,0,99,100,5,43,0,0,100,6,
1,0,0,0,101,102,5,45,0,0,102,8,1,0,0,0,103,104,5,42,0,0,104,10,1,0,0,0,105,
106,5,47,0,0,106,12,1,0,0,0,107,108,5,94,0,0,108,14,1,0,0,0,109,110,5,37,
0,0,110,16,1,0,0,0,111,112,5,40,0,0,112,18,1,0,0,0,113,114,5,41,0,0,114,
20,1,0,0,0,115,116,5,123,0,0,116,22,1,0,0,0,117,118,5,125,0,0,118,24,1,0,
0,0,119,120,5,91,0,0,120,26,1,0,0,0,121,122,5,93,0,0,122,28,1,0,0,0,123,
124,5,61,0,0,124,125,5,61,0,0,125,30,1,0,0,0,126,127,5,33,0,0,127,128,5,
61,0,0,128,32,1,0,0,0,129,130,5,60,0,0,130,34,1,0,0,0,131,132,5,60,0,0,132,
133,5,61,0,0,133,36,1,0,0,0,134,135,5,62,0,0,135,38,1,0,0,0,136,137,5,62,
0,0,137,138,5,61,0,0,138,40,1,0,0,0,139,140,5,117,0,0,140,141,5,110,0,0,
141,42,1,0,0,0,142,143,5,118,0,0,143,144,5,97,0,0,144,145,5,105,0,0,145,
44,1,0,0,0,146,147,5,46,0,0,147,148,5,46,0,0,148,46,1,0,0,0,149,150,5,46,
0,0,150,48,1,0,0,0,151,152,5,44,0,0,152,50,1,0,0,0,153,154,5,112,0,0,154,
155,5,105,0,0,155,156,5,101,0,0,156,157,5,118,0,0,157,158,5,105,0,0,158,
159,5,101,0,0,159,160,5,110,0,0,160,161,5,111,0,0,161,162,5,116,0,0,162,
52,1,0,0,0,163,164,5,100,0,0,164,165,5,122,0,0,165,166,5,275,0,0,166,167,
5,115,0,0,167,168,5,116,0,0,168,54,1,0,0,0,169,170,5,105,0,0,170,171,5,101,
0,0,171,172,5,118,0,0,172,173,5,105,0,0,173,174,5,101,0,0,174,175,5,116,
0,0,175,176,5,111,0,0,176,177,5,116,0,0,177,56,1,0,0,0,178,179,5,103,0,0,
179,180,5,97,0,0,180,181,5,114,0,0,181,182,5,117,0,0,182,183,5,109,0,0,183,
184,5,115,0,0,184,58,1,0,0,0,185,186,5,116,0,0,186,187,5,101,0,0,187,188,
5,105,0,0,188,189,5,107,0,0,189,190,5,116,0,0,190,60,1,0,0,0,191,192,5,106,
0,0,192,193,5,97,0,0,193,62,1,0,0,0,194,195,5,99,0,0,195,196,5,105,0,0,196,
197,5,116,0,0,197,198,5,257,0,0,198,199,5,100,0,0,199,200,5,105,0,0,200,
64,1,0,0,0,201,202,5,107,0,0,202,203,5,97,0,0,203,204,5,109,0,0,204,205,
5,275,0,0,205,206,5,114,0,0,206,66,1,0,0,0,207,208,5,100,0,0,208,209,5,97,
0,0,209,210,5,114,0,0,210,211,5,299,0,0,211,212,5,116,0,0,212,68,1,0,0,0,
213,214,5,107,0,0,214,215,5,97,0,0,215,216,5,116,0,0,216,217,5,114,0,0,217,
218,5,97,0,0,218,219,5,109,0,0,219,70,1,0,0,0,220,221,5,110,0,0,221,222,
5,111,0,0,222,72,1,0,0,0,223,224,5,108,0,0,224,225,5,299,0,0,225,226,5,100,
0,0,226,227,5,122,0,0,227,74,1,0,0,0,228,229,5,97,0,0,229,230,5,116,0,0,
230,231,5,103,0,0,231,232,5,114,0,0,232,233,5,105,0,0,233,234,5,101,0,0,
234,235,5,122,0,0,235,236,5,116,0,0,236,76,1,0,0,0,237,238,5,105,0,0,238,
239,5,122,0,0,239,240,5,108,0,0,240,241,5,97,0,0,241,242,5,117,0,0,242,243,
5,122,0,0,243,244,5,116,0,0,244,245,5,105,0,0,245,246,5,101,0,0,246,247,
5,115,0,0,247,78,1,0,0,0,248,249,5,105,0,0,249,250,5,122,0,0,250,251,5,108,
0,0,251,252,5,97,0,0,252,253,5,105,0,0,253,254,5,115,0,0,254,255,5,116,0,
0,255,80,1,0,0,0,256,257,5,112,0,0,257,258,5,97,0,0,258,259,5,116,0,0,259,
260,5,105,0,0,260,261,5,101,0,0,261,262,5,115,0,0,262,270,5,115,0,0,263,
264,5,97,0,0,264,265,5,112,0,0,265,266,5,108,0,0,266,267,5,97,0,0,267,268,
5,109,0,0,268,270,5,115,0,0,269,256,1,0,0,0,269,263,1,0,0,0,270,82,1,0,0,
0,271,276,5,39,0,0,272,275,3,85,42,0,273,275,8,0,0,0,274,272,1,0,0,0,274,
273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,
0,0,278,276,1,0,0,0,279,280,5,39,0,0,280,84,1,0,0,0,281,282,5,92,0,0,282,
283,5,39,0,0,283,86,1,0,0,0,284,286,7,1,0,0,285,284,1,0,0,0,285,286,1,0,
0,0,286,288,1,0,0,0,287,289,7,2,0,0,288,287,1,0,0,0,289,290,1,0,0,0,290,
288,1,0,0,0,290,291,1,0,0,0,291,298,1,0,0,0,292,294,3,47,23,0,293,295,7,
2,0,0,294,293,1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,
299,1,0,0,0,298,292,1,0,0,0,298,299,1,0,0,0,299,88,1,0,0,0,300,304,7,3,0,
0,301,303,7,4,0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,
1,0,0,0,305,90,1,0,0,0,306,304,1,0,0,0,307,309,7,5,0,0,308,307,1,0,0,0,309,
310,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,6,45,
0,0,313,92,1,0,0,0,314,315,5,47,0,0,315,316,5,47,0,0,316,320,1,0,0,0,317,
319,8,6,0,0,318,317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,
0,0,321,323,1,0,0,0,322,320,1,0,0,0,323,324,6,46,0,0,324,94,1,0,0,0,11,0,
269,274,276,285,290,296,298,304,310,320,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class SkolensLexer extends antlr4.Lexer {

    static grammarFileName = "Skolens.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'='", "';'", "'+'", "'-'", "'*'", "'/'", 
                         "'^'", "'%'", "'('", "')'", "'{'", "'}'", "'['", 
                         "']'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
                         "'un'", "'vai'", "'..'", "'.'", "','", "'pievienot'", 
                         "'dz\\u0113st'", "'ievietot'", "'garums'", "'teikt'", 
                         "'ja'", "'cit\\u0101di'", "'kam\\u0113r'", "'dar\\u012Bt'", 
                         "'katram'", "'no'", "'l\\u012Bdz'", "'atgriezt'", 
                         "'izlauzties'", "'izlaist'" ];
	static symbolicNames = [ null, "ASSIGN", "SEMI", "ADD", "SUB", "MUL", "DIV", 
                          "EXP", "MOD", "LPAREN", "RPAREN", "LCURL", "RCURL", 
                          "LBRAC", "RBRAC", "EQ", "NOTEQ", "LESS", "LESSEQ", 
                          "LARG", "LARGEQ", "AND", "OR", "CONCAT", "DOT", 
                          "COMMA", "PIEVIENOT", "DZEST", "IEVIETOT", "GARUMS", 
                          "PRINT", "IF", "ELSE", "WHILE", "DO", "EACH", 
                          "FROM", "TO", "RETURN", "BREAK", "CONTINUE", "BOOL", 
                          "STRING", "NUM", "ID", "WS", "COMMENT" ];
	static ruleNames = [ "ASSIGN", "SEMI", "ADD", "SUB", "MUL", "DIV", "EXP", 
                      "MOD", "LPAREN", "RPAREN", "LCURL", "RCURL", "LBRAC", 
                      "RBRAC", "EQ", "NOTEQ", "LESS", "LESSEQ", "LARG", 
                      "LARGEQ", "AND", "OR", "CONCAT", "DOT", "COMMA", "PIEVIENOT", 
                      "DZEST", "IEVIETOT", "GARUMS", "PRINT", "IF", "ELSE", 
                      "WHILE", "DO", "EACH", "FROM", "TO", "RETURN", "BREAK", 
                      "CONTINUE", "BOOL", "STRING", "ESC", "NUM", "ID", 
                      "WS", "COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

SkolensLexer.EOF = antlr4.Token.EOF;
SkolensLexer.ASSIGN = 1;
SkolensLexer.SEMI = 2;
SkolensLexer.ADD = 3;
SkolensLexer.SUB = 4;
SkolensLexer.MUL = 5;
SkolensLexer.DIV = 6;
SkolensLexer.EXP = 7;
SkolensLexer.MOD = 8;
SkolensLexer.LPAREN = 9;
SkolensLexer.RPAREN = 10;
SkolensLexer.LCURL = 11;
SkolensLexer.RCURL = 12;
SkolensLexer.LBRAC = 13;
SkolensLexer.RBRAC = 14;
SkolensLexer.EQ = 15;
SkolensLexer.NOTEQ = 16;
SkolensLexer.LESS = 17;
SkolensLexer.LESSEQ = 18;
SkolensLexer.LARG = 19;
SkolensLexer.LARGEQ = 20;
SkolensLexer.AND = 21;
SkolensLexer.OR = 22;
SkolensLexer.CONCAT = 23;
SkolensLexer.DOT = 24;
SkolensLexer.COMMA = 25;
SkolensLexer.PIEVIENOT = 26;
SkolensLexer.DZEST = 27;
SkolensLexer.IEVIETOT = 28;
SkolensLexer.GARUMS = 29;
SkolensLexer.PRINT = 30;
SkolensLexer.IF = 31;
SkolensLexer.ELSE = 32;
SkolensLexer.WHILE = 33;
SkolensLexer.DO = 34;
SkolensLexer.EACH = 35;
SkolensLexer.FROM = 36;
SkolensLexer.TO = 37;
SkolensLexer.RETURN = 38;
SkolensLexer.BREAK = 39;
SkolensLexer.CONTINUE = 40;
SkolensLexer.BOOL = 41;
SkolensLexer.STRING = 42;
SkolensLexer.NUM = 43;
SkolensLexer.ID = 44;
SkolensLexer.WS = 45;
SkolensLexer.COMMENT = 46;



